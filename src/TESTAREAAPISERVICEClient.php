<?php

declare(strict_types=1);

/*
 * TESTAREAAPISERVICELib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TESTAREAAPISERVICELib;

use TESTAREAAPISERVICELib\Controllers;

/**
 * TESTAREAAPISERVICELib client class
 */
class TESTAREAAPISERVICEClient implements ConfigurationInterface
{
    private $report;
    private $auth;
    private $serviceManagement;
    private $warehouseAddressManagement;
    private $bannerManagement;
    private $customerPackageManagement;
    private $customer;
    private $admin;
    private $warehouse;
    private $deliveryProof;
    private $paymentProofManagement;
    private $history;
    private $user;
    private $invoiceManagement;
    private $warehouseCheckingInvoiceManagement;
    private $revisedInvoice;
    private $blogManagement;
    private $promotionManagement;

    private $timeout = ConfigurationDefaults::TIMEOUT;
    private $enableRetries = ConfigurationDefaults::ENABLE_RETRIES;
    private $numberOfRetries = ConfigurationDefaults::NUMBER_OF_RETRIES;
    private $retryInterval = ConfigurationDefaults::RETRY_INTERVAL;
    private $backOffFactor = ConfigurationDefaults::BACK_OFF_FACTOR;
    private $maximumRetryWaitTime = ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    private $retryOnTimeout = ConfigurationDefaults::RETRY_ON_TIMEOUT;
    private $httpStatusCodesToRetry = ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    private $httpMethodsToRetry = ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    private $environment = ConfigurationDefaults::ENVIRONMENT;
    private $accessToken = ConfigurationDefaults::ACCESS_TOKEN;
    private $bearerAuthManager;
    private $authManagers = [];
    private $httpCallback;

    public function __construct(array $configOptions = null)
    {
        if (isset($configOptions['timeout'])) {
            $this->timeout = $configOptions['timeout'];
        }
        if (isset($configOptions['enableRetries'])) {
            $this->enableRetries = $configOptions['enableRetries'];
        }
        if (isset($configOptions['numberOfRetries'])) {
            $this->numberOfRetries = $configOptions['numberOfRetries'];
        }
        if (isset($configOptions['retryInterval'])) {
            $this->retryInterval = $configOptions['retryInterval'];
        }
        if (isset($configOptions['backOffFactor'])) {
            $this->backOffFactor = $configOptions['backOffFactor'];
        }
        if (isset($configOptions['maximumRetryWaitTime'])) {
            $this->maximumRetryWaitTime = $configOptions['maximumRetryWaitTime'];
        }
        if (isset($configOptions['retryOnTimeout'])) {
            $this->retryOnTimeout = $configOptions['retryOnTimeout'];
        }
        if (isset($configOptions['httpStatusCodesToRetry'])) {
            $this->httpStatusCodesToRetry = $configOptions['httpStatusCodesToRetry'];
        }
        if (isset($configOptions['httpMethodsToRetry'])) {
            $this->httpMethodsToRetry = $configOptions['httpMethodsToRetry'];
        }
        if (isset($configOptions['environment'])) {
            $this->environment = $configOptions['environment'];
        }
        if (isset($configOptions['accessToken'])) {
            $this->accessToken = $configOptions['accessToken'];
        }
        if (isset($configOptions['httpCallback'])) {
            $this->httpCallback = $configOptions['httpCallback'];
        }

        $this->bearerAuthManager = new BearerAuthManager($this->accessToken);
        $this->authManagers['global'] = $this->bearerAuthManager;
    }

    /**
     * Get the client configuration as an associative array
     */
    public function getConfiguration(): array
    {
        $configMap = [];

        if (isset($this->timeout)) {
            $configMap['timeout'] = $this->timeout;
        }
        if (isset($this->enableRetries)) {
            $configMap['enableRetries'] = $this->enableRetries;
        }
        if (isset($this->numberOfRetries)) {
            $configMap['numberOfRetries'] = $this->numberOfRetries;
        }
        if (isset($this->retryInterval)) {
            $configMap['retryInterval'] = $this->retryInterval;
        }
        if (isset($this->backOffFactor)) {
            $configMap['backOffFactor'] = $this->backOffFactor;
        }
        if (isset($this->maximumRetryWaitTime)) {
            $configMap['maximumRetryWaitTime'] = $this->maximumRetryWaitTime;
        }
        if (isset($this->retryOnTimeout)) {
            $configMap['retryOnTimeout'] = $this->retryOnTimeout;
        }
        if (isset($this->httpStatusCodesToRetry)) {
            $configMap['httpStatusCodesToRetry'] = $this->httpStatusCodesToRetry;
        }
        if (isset($this->httpMethodsToRetry)) {
            $configMap['httpMethodsToRetry'] = $this->httpMethodsToRetry;
        }
        if (isset($this->environment)) {
            $configMap['environment'] = $this->environment;
        }
        if ($this->bearerAuthManager->getAccessToken() !== null) {
            $configMap['accessToken'] = $this->bearerAuthManager->getAccessToken();
        }
        if (isset($this->httpCallback)) {
            $configMap['httpCallback'] = $this->httpCallback;
        }

        return $configMap;
    }

    /**
     * Clone this client and override given configuration options
     */
    public function withConfiguration(array $configOptions): self
    {
        return new self(\array_merge($this->getConfiguration(), $configOptions));
    }

    public function getTimeout(): int
    {
        return $this->timeout;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->enableRetries;
    }

    public function getNumberOfRetries(): int
    {
        return $this->numberOfRetries;
    }

    public function getRetryInterval(): float
    {
        return $this->retryInterval;
    }

    public function getBackOffFactor(): float
    {
        return $this->backOffFactor;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->maximumRetryWaitTime;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->retryOnTimeout;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->httpStatusCodesToRetry;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->httpMethodsToRetry;
    }

    public function getEnvironment(): string
    {
        return $this->environment;
    }

    public function getBearerAuthCredentials(): ?BearerAuthCredentials
    {
        return $this->bearerAuthManager;
    }

    /**
     * Get the base uri for a given server in the current environment
     *
     * @param  string $server Server name
     *
     * @return string         Base URI
     */
    public function getBaseUri(string $server = Server::SERVER_1): string
    {
        return static::ENVIRONMENT_MAP[$this->environment][$server];
    }

    /**
     * Returns Report Controller
     */
    public function getReportController(): Controllers\ReportController
    {
        if ($this->report == null) {
            $this->report = new Controllers\ReportController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->report;
    }

    /**
     * Returns Auth Controller
     */
    public function getAuthController(): Controllers\AuthController
    {
        if ($this->auth == null) {
            $this->auth = new Controllers\AuthController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->auth;
    }

    /**
     * Returns Service Management Controller
     */
    public function getServiceManagementController(): Controllers\ServiceManagementController
    {
        if ($this->serviceManagement == null) {
            $this->serviceManagement = new Controllers\ServiceManagementController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->serviceManagement;
    }

    /**
     * Returns Warehouse Address Management Controller
     */
    public function getWarehouseAddressManagementController(): Controllers\WarehouseAddressManagementController
    {
        if ($this->warehouseAddressManagement == null) {
            $this->warehouseAddressManagement = new Controllers\WarehouseAddressManagementController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->warehouseAddressManagement;
    }

    /**
     * Returns Banner Management Controller
     */
    public function getBannerManagementController(): Controllers\BannerManagementController
    {
        if ($this->bannerManagement == null) {
            $this->bannerManagement = new Controllers\BannerManagementController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->bannerManagement;
    }

    /**
     * Returns Customer Package Management Controller
     */
    public function getCustomerPackageManagementController(): Controllers\CustomerPackageManagementController
    {
        if ($this->customerPackageManagement == null) {
            $this->customerPackageManagement = new Controllers\CustomerPackageManagementController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->customerPackageManagement;
    }

    /**
     * Returns Customer Controller
     */
    public function getCustomerController(): Controllers\CustomerController
    {
        if ($this->customer == null) {
            $this->customer = new Controllers\CustomerController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->customer;
    }

    /**
     * Returns Admin Controller
     */
    public function getAdminController(): Controllers\AdminController
    {
        if ($this->admin == null) {
            $this->admin = new Controllers\AdminController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->admin;
    }

    /**
     * Returns Warehouse Controller
     */
    public function getWarehouseController(): Controllers\WarehouseController
    {
        if ($this->warehouse == null) {
            $this->warehouse = new Controllers\WarehouseController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->warehouse;
    }

    /**
     * Returns Delivery Proof Controller
     */
    public function getDeliveryProofController(): Controllers\DeliveryProofController
    {
        if ($this->deliveryProof == null) {
            $this->deliveryProof = new Controllers\DeliveryProofController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->deliveryProof;
    }

    /**
     * Returns Payment Proof Management Controller
     */
    public function getPaymentProofManagementController(): Controllers\PaymentProofManagementController
    {
        if ($this->paymentProofManagement == null) {
            $this->paymentProofManagement = new Controllers\PaymentProofManagementController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->paymentProofManagement;
    }

    /**
     * Returns History Controller
     */
    public function getHistoryController(): Controllers\HistoryController
    {
        if ($this->history == null) {
            $this->history = new Controllers\HistoryController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->history;
    }

    /**
     * Returns User Controller
     */
    public function getUserController(): Controllers\UserController
    {
        if ($this->user == null) {
            $this->user = new Controllers\UserController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->user;
    }

    /**
     * Returns Invoice Management Controller
     */
    public function getInvoiceManagementController(): Controllers\InvoiceManagementController
    {
        if ($this->invoiceManagement == null) {
            $this->invoiceManagement = new Controllers\InvoiceManagementController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->invoiceManagement;
    }

    /**
     * Returns Warehouse Checking Invoice Management Controller
     */
    public function getWarehouseCheckingInvoiceManagementController(): Controllers\WarehouseCheckingInvoiceManagementController
    {
        if ($this->warehouseCheckingInvoiceManagement == null) {
            $this->warehouseCheckingInvoiceManagement = new Controllers\WarehouseCheckingInvoiceManagementController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->warehouseCheckingInvoiceManagement;
    }

    /**
     * Returns Revised Invoice Controller
     */
    public function getRevisedInvoiceController(): Controllers\RevisedInvoiceController
    {
        if ($this->revisedInvoice == null) {
            $this->revisedInvoice = new Controllers\RevisedInvoiceController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->revisedInvoice;
    }

    /**
     * Returns Blog Management Controller
     */
    public function getBlogManagementController(): Controllers\BlogManagementController
    {
        if ($this->blogManagement == null) {
            $this->blogManagement = new Controllers\BlogManagementController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->blogManagement;
    }

    /**
     * Returns Promotion Management Controller
     */
    public function getPromotionManagementController(): Controllers\PromotionManagementController
    {
        if ($this->promotionManagement == null) {
            $this->promotionManagement = new Controllers\PromotionManagementController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->promotionManagement;
    }

    /**
     * A map of all baseurls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::SERVER_1 => 'http://http://localhost:8000',
            Server::SERVER_2 => 'http://DefaultParameterValue',
        ],
    ];
}

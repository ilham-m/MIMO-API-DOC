<?php
/*
 * TESTAREAAPISERVICELib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TESTAREAAPISERVICELib\Tests;

use TESTAREAAPISERVICELib\Exceptions\ApiException;
use TESTAREAAPISERVICELib\Exceptions;
use TESTAREAAPISERVICELib\ApiHelper;
use TESTAREAAPISERVICELib\Models;
use PHPUnit\Framework\TestCase;

class PaymentProofManagementControllerTest extends TestCase
{
    /**
     * @var \TESTAREAAPISERVICELib\Controllers\PaymentProofManagementController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getPaymentProofManagementController();
    }


    /**
     * Todo Add description for test testIndexPaymentProof
     */
    public function testIndexPaymentProof()
    {
        // Parameters for the API call
        $token = 'c78e1850d08e1898edf6e50856be0dd84ee93c6f2ab27beb1cdee9fa6b05e613a275d64702ce6279';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->indexPaymentProof($token, $accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testDetailPaymentProof
     */
    public function testDetailPaymentProof()
    {
        // Parameters for the API call
        $token = '79163ba2c9e07e0ebc6897dc95ab1e18460190402e35218b44296495d8c073a02d0899a81637ecfc';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->detailPaymentProof($token, $accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testPaymentProofImage
     */
    public function testPaymentProofImage()
    {
        // Parameters for the API call
        $name = 'MIMO-000001.png';
        $token = '67aa2d18c557cdc59af52ace7ec12c4aeeee164cc371c5c2b58d9a5099f9dfc3117a1696b2a4b849';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->paymentProofImage($name, $token, $accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testStorePaymentProof
     */
    public function testStorePaymentProof()
    {
        // Parameters for the API call
        $token = '67aa2d18c557cdc59af52ace7ec12c4aeeee164cc371c5c2b58d9a5099f9dfc3117a1696b2a4b849';
        $accept = '*/*';
        $packageId = 1;
        $description = 'Ini dp pertama paket mobil tesla';
        $image = '';
        $type = 'down_payment';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->storePaymentProof($token, $accept, $packageId, $description, $image, $type);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testUpdatePaymentProof
     */
    public function testUpdatePaymentProof()
    {
        // Parameters for the API call
        $xHttpMethodOverride = 'patch';
        $accept = '*/*';
        $packageId = 1;
        $description = 'Ini dp pertama paket mobil tesla edited';
        $type = 'additional_payment';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->updatePaymentProof($xHttpMethodOverride, $accept, $packageId, $description, $type);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testDeletePackage
     */
    public function testDeletePackage()
    {
        // Parameters for the API call
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->deletePackage($accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testRestorePackage
     */
    public function testRestorePackage()
    {
        // Parameters for the API call
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->restorePackage($accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}

<?php
/*
 * TESTAREAAPISERVICELib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TESTAREAAPISERVICELib\Tests;

use TESTAREAAPISERVICELib\Exceptions\ApiException;
use TESTAREAAPISERVICELib\Exceptions;
use TESTAREAAPISERVICELib\ApiHelper;
use TESTAREAAPISERVICELib\Models;
use PHPUnit\Framework\TestCase;

class WarehouseCheckingInvoiceManagementControllerTest extends TestCase
{
    /**
     * @var \TESTAREAAPISERVICELib\Controllers\WarehouseCheckingInvoiceManagementController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getWarehouseCheckingInvoiceManagementController();
    }


    /**
     * Todo Add description for test testIndexInvoice
     */
    public function testIndexInvoice()
    {
        // Parameters for the API call
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->indexInvoice($accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testShowInvoice
     */
    public function testShowInvoice()
    {
        // Parameters for the API call
        $token = 'c78e1850d08e1898edf6e50856be0dd84ee93c6f2ab27beb1cdee9fa6b05e613a275d64702ce6279';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->showInvoice($token, $accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testStoreInvoice
     */
    public function testStoreInvoice()
    {
        // Parameters for the API call
        $accept = '*/*';
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '{
  "package_id": "1",
  "invoice": [
    {
      "description": "test description 4' .
            '",
      "carton": 4,
      "cbm": 3.5,
      "price_per_cbm": 10000
    },
    {
' .
            '      "description": "test description 5",
      "carton": 4,
      "cbm": 3.5,
     ' .
            ' "price_per_cbm": 10000
    },
    {
      "description": "test description 6",
    ' .
            '  "carton": 4,
      "cbm": 3.5,
      "price_per_cbm": 10000
    }
  ]
}'),
            'TESTAREAAPISERVICELib\Models\\StoreInvoiceRequest1'
        );

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->storeInvoice($accept, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testSingleStoreInvoice
     */
    public function testSingleStoreInvoice()
    {
        // Parameters for the API call
        $accept = '*/*';
        $packageId = 1;
        $description = 'asd';
        $carton = 1;
        $cbm = 1;
        $pricePerCbm = 1;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->singleStoreInvoice($accept, $packageId, $description, $carton, $cbm, $pricePerCbm);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testBulkEditInvoice
     */
    public function testBulkEditInvoice()
    {
        // Parameters for the API call
        $accept = '*/*';
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '{
  "invoice": [
    {
      "description": "test description 1",
      "carton": 4,' .
            '
      "cbm": 3.5,
      "price_per_cbm": 10000,
      "total": 35000
    },
    {' .
            '
      "description": "test description 2",
      "carton": 4,
      "cbm": 3.5,
    ' .
            '  "price_per_cbm": 10000,
      "total": 35000
    },
    {
      "description": "te' .
            'st description 3",
      "carton": 4,
      "cbm": 3.5,
      "price_per_cbm": 10000,' .
            '
      "total": 35000
    }
  ]
}'),
            'TESTAREAAPISERVICELib\Models\\BulkEditInvoiceRequest'
        );

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->bulkEditInvoice($accept, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testSingleEditInvoice
     */
    public function testSingleEditInvoice()
    {
        // Parameters for the API call
        $accept = '*/*';
        $description = 'description 1 edited';
        $carton = 2;
        $cbm = 4.5;
        $pricePerCbm = 10000;
        $total = 90000;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->singleEditInvoice($accept, $description, $carton, $cbm, $pricePerCbm, $total);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testSingleDeleteInvoice
     */
    public function testSingleDeleteInvoice()
    {
        // Parameters for the API call
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->singleDeleteInvoice($accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}

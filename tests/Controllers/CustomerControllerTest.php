<?php
/*
 * TESTAREAAPISERVICELib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TESTAREAAPISERVICELib\Tests;

use TESTAREAAPISERVICELib\Exceptions\ApiException;
use TESTAREAAPISERVICELib\Exceptions;
use TESTAREAAPISERVICELib\ApiHelper;
use TESTAREAAPISERVICELib\Models;
use PHPUnit\Framework\TestCase;

class CustomerControllerTest extends TestCase
{
    /**
     * @var \TESTAREAAPISERVICELib\Controllers\CustomerController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getCustomerController();
    }


    /**
     * Todo Add description for test testCustomerIndexPackage
     */
    public function testCustomerIndexPackage()
    {
        // Parameters for the API call
        $token = '12c9c8c057d06482184c1b75e3f74a823b15d9d09c653ba323fa0bf269489d0cac41b20dd2b1aa80';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->customerIndexPackage($token, $accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testDetailPackageCustomer
     */
    public function testDetailPackageCustomer()
    {
        // Parameters for the API call
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->detailPackageCustomer($accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testStorePackage
     */
    public function testStorePackage()
    {
        // Parameters for the API call
        $accept = '*/*';
        $shippingAddress = 'jakarta';
        $description = 'paket 3';
        $invoice = '';
        $packageList = '';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->storePackage($accept, $shippingAddress, $description, $invoice, $packageList);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testAddTrackingNumberResiNumber
     */
    public function testAddTrackingNumberResiNumber()
    {
        // Parameters for the API call
        $token = '67aa2d18c557cdc59af52ace7ec12c4aeeee164cc371c5c2b58d9a5099f9dfc3117a1696b2a4b849';
        $accept = '*/*';
        $packageId = 3;
        $trackingNumber = 'RESI123';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->addTrackingNumberResiNumber($token, $accept, $packageId, $trackingNumber);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testUpdatePackage
     */
    public function testUpdatePackage()
    {
        // Parameters for the API call
        $xHttpMethodOverride = 'patch';
        $accept = '*/*';
        $shippingAddress = 'ada';
        $description = 'edited';
        $invoice = '';
        $packageList = '';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->updatePackage($xHttpMethodOverride, $accept, $shippingAddress, $description, $invoice, $packageList);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}

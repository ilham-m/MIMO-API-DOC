<?php
/*
 * TESTAREAAPISERVICELib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TESTAREAAPISERVICELib\Tests;

use TESTAREAAPISERVICELib\Exceptions\ApiException;
use TESTAREAAPISERVICELib\Exceptions;
use TESTAREAAPISERVICELib\ApiHelper;
use TESTAREAAPISERVICELib\Models;
use PHPUnit\Framework\TestCase;

class AdminControllerTest extends TestCase
{
    /**
     * @var \TESTAREAAPISERVICELib\Controllers\AdminController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getAdminController();
    }


    /**
     * Todo Add description for test testIndexPackage
     */
    public function testIndexPackage()
    {
        // Parameters for the API call
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->indexPackage($accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testFilterPackage
     */
    public function testFilterPackage()
    {
        // Parameters for the API call
        $token = '12c9c8c057d06482184c1b75e3f74a823b15d9d09c653ba323fa0bf269489d0cac41b20dd2b1aa80';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->filterPackage($token, $accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testDetailPackage
     */
    public function testDetailPackage()
    {
        // Parameters for the API call
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->detailPackage($accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testDeletePackage
     */
    public function testDeletePackage()
    {
        // Parameters for the API call
        $accept = '*/*';
        $customerId = 1;
        $statusApproval = 'pending';
        $statusPayment = 'pending';
        $statusChecking = 'pending';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->deletePackage($accept, $customerId, $statusApproval, $statusPayment, $statusChecking);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testRestorePackage
     */
    public function testRestorePackage()
    {
        // Parameters for the API call
        $accept = '*/*';
        $customerId = 1;
        $statusApproval = 'pending';
        $statusPayment = 'pending';
        $statusChecking = 'pending';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->restorePackage($accept, $customerId, $statusApproval, $statusPayment, $statusChecking);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testApprovePackage
     */
    public function testApprovePackage()
    {
        // Parameters for the API call
        $accept = '*/*';
        $packageId = 3;
        $action = 'approve';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->approvePackage($accept, $packageId, $action);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testApprovePayment
     */
    public function testApprovePayment()
    {
        // Parameters for the API call
        $token = '67aa2d18c557cdc59af52ace7ec12c4aeeee164cc371c5c2b58d9a5099f9dfc3117a1696b2a4b849';
        $accept = '*/*';
        $packageId = 1;
        $action = 'approve-down-payment';
        $warehouseAddress = 'jonggol sebrang london, patoka big ben tower';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->approvePayment($token, $accept, $packageId, $action, $warehouseAddress);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testSendPackage
     */
    public function testSendPackage()
    {
        // Parameters for the API call
        $token = '67aa2d18c557cdc59af52ace7ec12c4aeeee164cc371c5c2b58d9a5099f9dfc3117a1696b2a4b849';
        $accept = '*/*';
        $packageId = 1;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->sendPackage($token, $accept, $packageId);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testSendInvoice
     */
    public function testSendInvoice()
    {
        // Parameters for the API call
        $token = '67aa2d18c557cdc59af52ace7ec12c4aeeee164cc371c5c2b58d9a5099f9dfc3117a1696b2a4b849';
        $accept = '*/*';
        $packageId = 1;
        $isJakarta = 0;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->sendInvoice($token, $accept, $packageId, $isJakarta);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testSendRevisedInvice
     */
    public function testSendRevisedInvice()
    {
        // Parameters for the API call
        $token = '67aa2d18c557cdc59af52ace7ec12c4aeeee164cc371c5c2b58d9a5099f9dfc3117a1696b2a4b849';
        $accept = '*/*';
        $packageId = 1;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->sendRevisedInvice($token, $accept, $packageId);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}

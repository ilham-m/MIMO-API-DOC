<?php
/*
 * TESTAREAAPISERVICELib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TESTAREAAPISERVICELib\Tests;

use TESTAREAAPISERVICELib\Exceptions\ApiException;
use TESTAREAAPISERVICELib\Exceptions;
use TESTAREAAPISERVICELib\ApiHelper;
use TESTAREAAPISERVICELib\Models;
use PHPUnit\Framework\TestCase;

class WarehouseAddressManagementControllerTest extends TestCase
{
    /**
     * @var \TESTAREAAPISERVICELib\Controllers\WarehouseAddressManagementController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getWarehouseAddressManagementController();
    }


    /**
     * Todo Add description for test testIndexWarehouseAddress
     */
    public function testIndexWarehouseAddress()
    {
        // Parameters for the API call
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->indexWarehouseAddress($accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testShowWarehouse
     */
    public function testShowWarehouse()
    {
        // Parameters for the API call
        $accept = 'application/json';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->showWarehouse($accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testWarehouseAddress
     */
    public function testWarehouseAddress()
    {
        // Parameters for the API call
        $accept = '*/*';
        $warehouseAddress = 'contoh alamat 3';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->warehouseAddress($accept, $warehouseAddress);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testEditWarehouseAddress
     */
    public function testEditWarehouseAddress()
    {
        // Parameters for the API call
        $xHttpMethodOverride = 'patch';
        $accept = '*/*';
        $warehouseAddress = 'contoh address 3 edit';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->editWarehouseAddress($xHttpMethodOverride, $accept, $warehouseAddress);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testDeleteService
     */
    public function testDeleteService()
    {
        // Parameters for the API call
        $accept = 'application/json';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->deleteService($accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}

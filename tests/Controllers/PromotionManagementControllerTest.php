<?php
/*
 * TESTAREAAPISERVICELib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TESTAREAAPISERVICELib\Tests;

use TESTAREAAPISERVICELib\Exceptions\ApiException;
use TESTAREAAPISERVICELib\Exceptions;
use TESTAREAAPISERVICELib\ApiHelper;
use TESTAREAAPISERVICELib\Models;
use PHPUnit\Framework\TestCase;

class PromotionManagementControllerTest extends TestCase
{
    /**
     * @var \TESTAREAAPISERVICELib\Controllers\PromotionManagementController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getPromotionManagementController();
    }


    /**
     * Todo Add description for test testIndexPromotion
     */
    public function testIndexPromotion()
    {
        // Parameters for the API call
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->indexPromotion($accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testDetailPromotion
     */
    public function testDetailPromotion()
    {
        // Parameters for the API call
        $token = 'f447d64e2ab84708bace0e966c58dd5bda80e52cf55d1aff6272323e7d0acf7b5308324fe707cd5c';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->detailPromotion($token, $accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testImagePromotion
     */
    public function testImagePromotion()
    {
        // Parameters for the API call
        $token = 'f447d64e2ab84708bace0e966c58dd5bda80e52cf55d1aff6272323e7d0acf7b5308324fe707cd5c';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->imagePromotion($token, $accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testCreatePromotion
     */
    public function testCreatePromotion()
    {
        // Parameters for the API call
        $token = 'af374e4826a538c24dec3ce1dbde6dda3e80d1220b66dff6fc649e04cf77b128a9f99a49e5c4c529';
        $accept = '*/*';
        $code = 'MIMO1212';
        $discount = 0.25;
        $status = 1;
        $expiredAt = '2022-02-4';
        $image = '';
        $title = 'Berkah Ramadan';
        $description = 'Gratis ongkir selama ramadan';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->createPromotion($token, $accept, $code, $discount, $status, $expiredAt, $image, $title, $description);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testUpdatePromotion
     */
    public function testUpdatePromotion()
    {
        // Parameters for the API call
        $xHttpMethodOverride = 'patch';
        $token = 'af374e4826a538c24dec3ce1dbde6dda3e80d1220b66dff6fc649e04cf77b128a9f99a49e5c4c529';
        $accept = '*/*';
        $code = 'MIMO1212';
        $discount = 0.50;
        $status = 1;
        $expiredAt = '2021-12-22';
        $maxAmount = 100000;
        $title = 'Berkah Ramadan Edit';
        $description = 'edit';
        $image = '';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->updatePromotion($xHttpMethodOverride, $token, $accept, $code, $discount, $status, $expiredAt, $maxAmount, $title, $description, $image);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testRestorePromotion
     */
    public function testRestorePromotion()
    {
        // Parameters for the API call
        $token = 'f447d64e2ab84708bace0e966c58dd5bda80e52cf55d1aff6272323e7d0acf7b5308324fe707cd5c';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->restorePromotion($token, $accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testDeletePromotion
     */
    public function testDeletePromotion()
    {
        // Parameters for the API call
        $xHttpMethodOverride = 'patch';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->deletePromotion($xHttpMethodOverride, $accept);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}
